import json
import logging
import re
import requests
import sys

from http import HTTPStatus
from slugify import slugify

from utils import safe_mkdir


LOGGER = logging.getLogger("GenerateEnums")
logging.basicConfig(stream=sys.stdout, level=logging.INFO)


def enumizy_name(name: str) -> str:
    replace_pairs = [
        (r"d'", "d "),
        (r"'s", "s"),
        (r", nes", ""),
        # (r"\(.*\)", ""),
        (r"\(Plurinational State of\)", "")
    ]
    for p in replace_pairs:
        name = re.sub(p[0], p[1], name)
    return slugify(name).upper().replace("-", "_")


def generate_enums(urls, model_name, output_file, include_header=True):
    """Generate Enum `model_name` from Entities merged from `urls` written into `output_file`.

    :param urls: merge all
    :param model_name:
    :param output_file:
    :param include_header: useful when generating multiple Enums into the same file.
    :return: Exception in case of error.
    """
    LOGGER.info(f"Generating {model_name} to {output_file.name}")

    for url in urls:
        LOGGER.info(f"Fetching data from {url}...")
        response = requests.get(url)
        assert response.status_code == HTTPStatus.OK
        LOGGER.info(".. Fetching done.")

        results = json.loads(response.content)
        enum_pairs = {}
        for r in results["results"]:
            value = r["id"]
            name = enumizy_name(r["text"])
            if name in enum_pairs and enum_pairs[name] == value:
                raise Exception(f"{name} already exists with value {value}, original string: {r['text']}")
            enum_pairs[name] = value

    if include_header:
        output_file.write(f"# Generated by `python3 {__name__}`, DO NOT CHANGE, change the generator script\n")
        output_file.write(f"from utils import MMEnum\n")

    output_file.write(f"\n\nclass {model_name}(MMEnum):\n")
    for name, value in enum_pairs.items():
        output_file.write(f"    {name} = \"{value}\"\n")
    output_file.write("\n")


# TESTS
def assert_equal(a: str, b: str):
    if a != b:
        raise Exception(f"'{a}' different from '{b}'")


assert_equal(enumizy_name("Africa CAMEU region, nes"), "AFRICA_CAMEU_REGION")
assert_equal(enumizy_name("Antigua and Barbuda"), "ANTIGUA_AND_BARBUDA")
assert_equal(enumizy_name("Bolivia (Plurinational State of)"), "BOLIVIA")
assert_equal(enumizy_name("Br. Indian Ocean Terr."), "BR_INDIAN_OCEAN_TERR")
assert_equal(enumizy_name("CÃ´te d'Ivoire"), "COTE_D_IVOIRE")
assert_equal(enumizy_name("Dem. People's Rep. of Korea"), "DEM_PEOPLES_REP_OF_KOREA")

# REAL DEAL
enum_dir = "enums"
safe_mkdir(enum_dir)
with open(f"{enum_dir}/country.py", "w") as output_file:
    # Merge partner/reporter Areas for one comprehensive list of Countries.
    generate_enums(
        urls=[
            "https://comtrade.un.org/Data/cache/partnerAreas.json",
            "https://comtrade.un.org/data/cache/reporterAreas.json",
        ],
        model_name="Country",
        output_file=output_file,
    )


